<?php 
/* Cachekey: cache/stash_default/documentation\api\php\1c61c7a9849f90bd1a0838afbe57b0e9/ */
/* Type: array */
/* Expiration: 2019-04-13T13:10:07+00:00 */



$loaded = true;
$expiration = 1555161007;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554789030;

