<?php 
/* Cachekey: cache/stash_default/documentation\api\php\d2f2ad157279b1ad08d8ce95e0b7209a/ */
/* Type: array */
/* Expiration: 2019-04-09T18:47:12+00:00 */



$loaded = true;
$expiration = 1554835632;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554465626;

