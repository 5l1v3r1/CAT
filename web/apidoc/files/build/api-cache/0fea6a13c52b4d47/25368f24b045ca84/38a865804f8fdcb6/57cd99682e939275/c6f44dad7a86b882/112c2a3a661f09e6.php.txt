<?php 
/* Cachekey: cache/stash_default/documentation\api\php\ffa2e7ca50c9f3401311331952bc42f4/ */
/* Type: array */
/* Expiration: 2019-04-14T01:04:08+00:00 */



$loaded = true;
$expiration = 1555203848;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554789030;

