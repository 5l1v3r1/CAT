<?php 
/* Cachekey: cache/stash_default/documentation\api\php\e65874baf15dcf77cb9b4b4461bd04fa/ */
/* Type: array */
/* Expiration: 2019-04-14T00:43:53+00:00 */



$loaded = true;
$expiration = 1555202633;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1554789030;

