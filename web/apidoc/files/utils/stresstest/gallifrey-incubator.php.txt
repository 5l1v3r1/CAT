<?php
/*
 * *****************************************************************************
 * Contributions to this work were made on behalf of the GÉANT project, a 
 * project that has received funding from the European Union’s Framework 
 * Programme 7 under Grant Agreements No. 238875 (GN3) and No. 605243 (GN3plus),
 * Horizon 2020 research and innovation programme under Grant Agreements No. 
 * 691567 (GN4-1) and No. 731122 (GN4-2).
 * On behalf of the aforementioned projects, GEANT Association is the sole owner
 * of the copyright in all material which was developed by a member of the GÉANT
 * project. GÉANT Vereniging (Association) is registered with the Chamber of 
 * Commerce in Amsterdam with registration number 40535155 and operates in the 
 * UK as a branch of GÉANT Vereniging.
 * 
 * Registered office: Hoekenrode 3, 1102BR Amsterdam, The Netherlands. 
 * UK branch address: City House, 126-130 Hills Road, Cambridge CB2 1PQ, UK
 *
 * License: see the web/copyright.inc.php file in the file structure or
 *          <base_url>/copyright.php after deploying the software
 */

require_once dirname(dirname(__DIR__)) . "/config/_config.php";
require_once dirname(dirname(__DIR__)) . "/web/lib/admin/API.php";
require_once dirname(dirname(__DIR__)) . "/core/common/OutsideComm.php";

const APIKEY = "foobar123";
const APIURL = "https://ticker.eduroam.lu/cat-trunk/admin/API.php";
const OWNER = "eduPersonTargetedID:ab4929d8bad74b180d05932ec350843d5ff1f8c2!https://clueless.restena.lu/simplesamlphp/saml2/idp/metadata.php";
const PLANETS = 20; // keep this below number of planets in source file, ~400
const UNIVERSITIES = 5; // keep this below number of universities in source file, 5
const DEPARTMENTS = 5; // keep this below number of departments in source file, 13
const BATCHSIZE = 50;
const TOTAL_USERS = PLANETS*UNIVERSITIES*DEPARTMENTS*BATCHSIZE;
const VERBOSE = 0;

$planets = array_slice(file("planets.txt", FILE_IGNORE_NEW_LINES), 0, PLANETS);
$universities = array_slice(file("uni-prefixes", FILE_IGNORE_NEW_LINES), 0, UNIVERSITIES);
$departments = array_slice(file("departments", FILE_IGNORE_NEW_LINES), 0, DEPARTMENTS);
$accounts = file("accounts.txt", FILE_IGNORE_NEW_LINES);
$logo = file_get_contents("/home/swinter/Development/GitHub/GEANT/CAT/web/resources/images/consortium_logo.png");

function postJsonHandle($url, $dataArray) {
    $ch = \curl_init($url);
    \curl_setopt_array($ch, array(
        CURLOPT_POST => TRUE,
        CURLOPT_RETURNTRANSFER => TRUE,
        CURLOPT_POSTFIELDS => json_encode($dataArray),
        CURLOPT_FRESH_CONNECT => TRUE,
    ));
    return $ch;
}

function prettytime(DateInterval $datetime) {
    return $datetime->h . " hours, " . $datetime->i . " minutes, " . $datetime->s . " seconds.";
}

$planetBatches = [];
$instIdentifiers = [];
foreach ($planets as $index => $onePlanet) {
    $modulo = (int) (count($planets) * count($universities) / BATCHSIZE);
    $planetBatches[$index % ($modulo > 0 ? $modulo : 1)][] = $onePlanet;
}

$time1 = microtime(true);
$micro1 = sprintf("%06d", ($time1 - floor($time1)) * 1000000);
$starttime = new DateTime(date('Y-m-d H:i:s.' . $micro1, $time1));
echo "
*************************************************
Gallifrey Universe Construction, at your service.
*************************************************\n\n";
echo "Starting at " . $starttime->format("Y-m-d H:i:s.u") . "\n\n";

$counter = count($planets) * count($universities);
echo "Creating $counter Identity Providers across " . count($planets) . " planets.\n==========================\n";
foreach ($planetBatches as $batchIndex => $oneBatch) {
    $multiHandle = curl_multi_init();
    if (VERBOSE) {
        echo "[Batch IdP/$batchIndex - parallel with " . count($oneBatch) * count($universities) . "]";
    }
    $output = "";
    $handleList = [];
    foreach ($oneBatch as $onePlanet) {
        foreach ($universities as $oneSchool) {
            $idpName = "$oneSchool of $onePlanet";
            switch (VERBOSE) {
                case 2:
                    $output .= "\n  [IdP] $idpName";
                    break;
                case 1:
                    $output .= ".";
                default:
            }
            $dataNewInst = [
                "ACTION" => \web\lib\admin\API::ACTION_NEWINST,
                "APIKEY" => APIKEY,
                "PARAMETERS" => [
                    "0" => [
                        "NAME" => "general:instname",
                        "LANG" => "C",
                        "VALUE" => $idpName,
                    ],
                    "1" => [
                        "NAME" => "general:logo_file",
                        "VALUE" => base64_encode($logo),
                    ],
                    "2" => [
                        "NAME" => "support:email",
                        "LANG" => "C",
                        "VALUE" => "help@yourself"
                    ]
                ],
            ];
            $handle = postJsonHandle(APIURL, $dataNewInst);
            $handleList[] = $handle;
            curl_multi_add_handle($multiHandle, $handle);
        }
    }
    //execute the handles
    $active = null;
    do {
        $mrc = curl_multi_exec($multiHandle, $active);
    } while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active && $mrc == CURLM_OK) {
        if (curl_multi_select($multiHandle) == -1) {
            usleep(1);
        }
        do {
            $mrc = curl_multi_exec($multiHandle, $active);
        } while ($mrc == CURLM_CALL_MULTI_PERFORM);
    }
    foreach ($handleList as $oneHandle) {
        $idpCreationResult = json_decode(curl_multi_getcontent($oneHandle), TRUE);

        if (isset($idpCreationResult["error"]) || !isset($idpCreationResult["details"][\web\lib\admin\API::AUXATTRIB_CAT_INST_ID])) {
            var_export($dataNewInst);
            var_export($idpCreationResult);
            exit(2);
        }
        $instIdentifiers[] = $idpCreationResult["details"][\web\lib\admin\API::AUXATTRIB_CAT_INST_ID];
        curl_multi_remove_handle($multiHandle, $oneHandle);
    }
    curl_multi_close($multiHandle);
    echo $output;
    if (VERBOSE) {
        echo "\n";
    }
}

$time2 = microtime(true);
$micro2 = sprintf("%06d", ($time2 - floor($time2)) * 1000000);
$endtime1 = new DateTime(date('Y-m-d H:i:s.' . $micro2, $time2));
echo "Identity Provider creation finished at " . $endtime1->format("Y-m-d H:i:s.u") . "\n\n";

echo "It took " . prettytime($endtime1->diff($starttime));
// now, create one SB profile for each of the institutions

$instBatches = [];
$profileIdentifiers = [];
foreach ($instIdentifiers as $index => $oneInst) {
    $modulo = (int) (count($instIdentifiers) * count($departments) / BATCHSIZE);
    $instBatches[$index % ($modulo > 0 ? $modulo : 1)][] = $oneInst;
}

$counter *= count($departments);
echo "\n\nCreating $counter Managed IdP Profiles\n=====================\n";
foreach ($instBatches as $batchIndex => $oneBatch) {
    $multiHandle = curl_multi_init();
    if (VERBOSE) {
        echo "[Batch ProfileManaged/$batchIndex - parallel with " . count($oneBatch) * count($departments) . "]";
    }
    $output = "";
    $handleList = [];
    foreach ($oneBatch as $oneInstId) {
        foreach ($departments as $oneDepartment) {
            $profilename = "Department of $oneDepartment";
            switch (VERBOSE) {
                case 2:
                    $output .= "\n    [ProfileM] $oneInstId / $profilename";
                    break;
                case 1:
                    $output .= ".";
                default:
            }
            $dataNewProfile = [
                "ACTION" => \web\lib\admin\API::ACTION_NEWPROF_SB,
                "APIKEY" => APIKEY,
                "PARAMETERS" => [
                    "0" => [
                        "NAME" => \web\lib\admin\API::AUXATTRIB_CAT_INST_ID,
                        "VALUE" => $oneInstId
                    ],
                    "1" => [
                        "NAME" => \web\lib\admin\API::AUXATTRIB_SB_TOU,
                        "VALUE" => 1
                    ],
                ]
            ];
            $handle = postJsonHandle(APIURL, $dataNewProfile);
            $handleList[] = $handle;
            curl_multi_add_handle($multiHandle, $handle);
        }
    }
    // execute
    $active = null;
    do {
        $mrc = curl_multi_exec($multiHandle, $active);
    } while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active && $mrc == CURLM_OK) {
        if (curl_multi_select($multiHandle) == -1) {
            usleep(1);
        }
        do {
            $mrc = curl_multi_exec($multiHandle, $active);
        } while ($mrc == CURLM_CALL_MULTI_PERFORM);
    }
    foreach ($handleList as $oneHandle) {
        $profileCreationResult = json_decode(curl_multi_getcontent($oneHandle), TRUE);

        if (isset($profileCreationResult["error"]) || !isset($profileCreationResult["details"][\web\lib\admin\API::AUXATTRIB_CAT_PROFILE_ID])) {
            var_export($dataNewInst);
            var_export($idpCreationResult);
            exit(2);
        }
        $profileIdentifiers[] = $profileCreationResult["details"][\web\lib\admin\API::AUXATTRIB_CAT_PROFILE_ID];
        curl_multi_remove_handle($multiHandle, $oneHandle);
    }
    curl_multi_close($multiHandle);
    echo $output;
    if (VERBOSE) {
        echo "\n";
    }
}

$time3 = microtime(true);
$micro3 = sprintf("%06d", ($time3 - floor($time3)) * 1000000);
$endtime2 = new DateTime(date('Y-m-d H:i:s.' . $micro3, $time3));
echo "Profile creation finished at " . $endtime2->format("Y-m-d H:i:s.u") . "\n\n";

echo "It took " . prettytime($endtime2->diff($endtime1));


echo "\n\nCreating approximately " . TOTAL_USERS . " Managed IdP End Users\n=======================\n";
$usercount = 0;
$output = "";
$userList = [];
foreach ($profileIdentifiers as $oneProfile) {
    $handleList = [];
    if (VERBOSE) {
        echo "[Batch MUsers] $oneProfile";
    }
    $multiHandle = curl_multi_init();
    $indexes = array_rand($accounts, min([TOTAL_USERS / count($profileIdentifiers), 50]));
    foreach ($indexes as $index) {
        $dataNewUser = [
            "ACTION" => \web\lib\admin\API::ACTION_ENDUSER_NEW,
            "APIKEY" => APIKEY,
            "PARAMETERS" => [
                "0" => [
                    "NAME" => \web\lib\admin\API::AUXATTRIB_CAT_PROFILE_ID,
                    "VALUE" => $oneProfile
                ],
                "1" => [
                    "NAME" => \web\lib\admin\API::AUXATTRIB_SB_USERNAME,
                    "VALUE" => $accounts[$index]
                ],
                "2" => [
                    "NAME" => \web\lib\admin\API::AUXATTRIB_SB_EXPIRY,
                    "VALUE" => "2025-03-14 12:34:56"
                ],
            ]
        ];
        switch (VERBOSE) {
            case 2:
                echo " $accounts[$index] #";

                break;
            case 1:
                echo ".";
            default:
        }
        $handle = postJsonHandle(APIURL, $dataNewUser);
        $handleList[] = $handle;
        curl_multi_add_handle($multiHandle, $handle);
    }
    $active = null;
    do {
        $mrc = curl_multi_exec($multiHandle, $active);
    } while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active && $mrc == CURLM_OK) {
        if (curl_multi_select($multiHandle) == -1) {
            usleep(1);
        }
        do {
            $mrc = curl_multi_exec($multiHandle, $active);
        } while ($mrc == CURLM_CALL_MULTI_PERFORM);
    }
    foreach ($handleList as $oneHandle) {
        $userCreationResult = json_decode(curl_multi_getcontent($oneHandle), TRUE);
        $userList[$oneProfile][] = $userCreationResult["details"][\web\lib\admin\API::AUXATTRIB_SB_USERID];
        $usercount += 1;
        curl_multi_remove_handle($multiHandle, $oneHandle);
    }
    curl_multi_close($multiHandle);
    if (VERBOSE) {
        echo "\n";
    }
}

$time4 = microtime(true);
$micro4 = sprintf("%06d", ($time4 - floor($time4)) * 1000000);
$endtime3 = new DateTime(date('Y-m-d H:i:s.' . $micro4, $time4));
echo "User creation ($usercount users) finished at " . $endtime3->format("Y-m-d H:i:s.u") . "\n\n";

echo "It took " . prettytime($endtime3->diff($endtime2));
echo "\n\nCreating a token for each of those users, $usercount tokens in total.\n================================\n";
// now, a token, for 10 activations
$tokenList = [];

foreach ($userList as $profId => $userset) {
    $handleList = [];
    if (VERBOSE) {
        echo "[Batch Token] $profId";
    }
    $multiHandle = curl_multi_init();
    foreach ($userset as $oneUserId) {
        $dataNewToken = [
            "ACTION" => \web\lib\admin\API::ACTION_TOKEN_NEW,
            "APIKEY" => APIKEY,
            "PARAMETERS" => [
                "0" => [
                    "NAME" => \web\lib\admin\API::AUXATTRIB_CAT_PROFILE_ID,
                    "VALUE" => $profId
                ],
                "1" => [
                    "NAME" => \web\lib\admin\API::AUXATTRIB_SB_USERID,
                    "VALUE" => $oneUserId
                ],
                "2" => [
                    "NAME" => \web\lib\admin\API::AUXATTRIB_TOKEN_ACTIVATIONS,
                    "VALUE" => 10
                ]
            ]
        ];
        $handle = postJsonHandle(APIURL, $dataNewToken);
        $handleList[] = $handle;
        curl_multi_add_handle($multiHandle, $handle);
    }
    $active = null;
    do {
        $mrc = curl_multi_exec($multiHandle, $active);
    } while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active && $mrc == CURLM_OK) {
        if (curl_multi_select($multiHandle) == -1) {
            usleep(1);
        }
        do {
            $mrc = curl_multi_exec($multiHandle, $active);
        } while ($mrc == CURLM_CALL_MULTI_PERFORM);
    }
    foreach ($handleList as $oneHandle) {
        $tokenCreationResult = json_decode(curl_multi_getcontent($oneHandle), TRUE);
        if (isset($tokenCreationResult["error"]) || !isset($tokenCreationResult["details"][\web\lib\admin\API::AUXATTRIB_TOKEN])) {
            var_export($dataNewToken);
            var_export($tokenCreationResult);
            exit(2);
        }
        $tokenList[$profId][] = $tokenCreationResult["details"][\web\lib\admin\API::AUXATTRIB_TOKEN];
        curl_multi_remove_handle($multiHandle, $oneHandle);
        switch (VERBOSE) {
            case 2:
                echo "Token: " . $tokenCreationResult["details"][\web\lib\admin\API::AUXATTRIB_TOKEN] . "\n";
                break;
            case 1:
                echo ".";
            default:
        }
    }
    if (VERBOSE) {
        echo "\n";
    }
    curl_multi_close($multiHandle);
}

$time5 = microtime(true);
$micro5 = sprintf("%06d", ($time5 - floor($time5)) * 1000000);
$endtime4 = new DateTime(date('Y-m-d H:i:s.' . $micro5, $time5));
echo "Token creation finished at " . $endtime4->format("Y-m-d H:i:s.u") . "\n\n";

echo "It took " . prettytime($endtime4->diff($endtime3));

echo "\n\nRedeeming all those invitation tokens for an Apple installer each.\n=======================\n";

foreach ($tokenList as $profId => $tokens) {
    $handleList = [];
    if (VERBOSE) {
        echo "[Batch Installer] $profId";
    }
    $multiHandle = curl_multi_init();
    foreach ($tokens as $token) {
        $handle = postJsonHandle("https://ticker.eduroam.lu/cat-trunk/user/sb_download.php?profile=$profId&generatedfor=silverbullet&device=apple_hi_sierra&individualtoken=$token&importpassword=1234", []);
        $handleList[] = $handle;
        curl_multi_add_handle($multiHandle, $handle);
    }
    $active = null;
    do {
        $mrc = curl_multi_exec($multiHandle, $active);
    } while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active && $mrc == CURLM_OK) {
        if (curl_multi_select($multiHandle) == -1) {
            usleep(1);
        }
        do {
            $mrc = curl_multi_exec($multiHandle, $active);
        } while ($mrc == CURLM_CALL_MULTI_PERFORM);
    }
    foreach ($handleList as $oneHandle) {
        $result = curl_multi_getcontent($oneHandle);
        switch (VERBOSE) {
            case 2:
                echo "Installer: $result\n";
                break;
            case 1:
                echo ".";
            default:
        }
    }
}

$time6 = microtime(true);
$micro6 = sprintf("%06d", ($time6 - floor($time6)) * 1000000);
$endtime5 = new DateTime(date('Y-m-d H:i:s.' . $micro6, $time6));
echo "Installer generation finished at " . $endtime5->format("Y-m-d H:i:s.u") . "\n\n";

echo "It took " . prettytime($endtime5->diff($endtime4));


echo "\n\n=====================\nThe TOTAL execution time was " . prettytime($endtime5->diff($starttime)) . "\n\n";

